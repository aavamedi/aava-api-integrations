directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
# Type of the approval for absence
enum AbsenceApprovalType {
  # Own notive, with the permission of the supervisor
  Supervisor
  # Doctor's note
  Doctor
  # Nurse's note
  Nurse
}

input AbsenceInput {
  # Unique identifier of the employee
  externalId: ID!
  # Start date of the absence
  startDate: Date!
  # End date of the absence (required to be startDate or later)
  endDate: Date!
  # Type of absence approval
  approvalType: AbsenceApprovalType
}

# Address
type Address {
  # Street address, eg. Vanha valtatie 198
  street: MediumString
  # Postal code, eg. 04500
  postalCode: MediumString
  # Post office, eg. Kellokoski
  postOffice: MediumString
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

# Non-empty String with less or equal than 10 characters
scalar CostCenterCode

# Input type for importing cost centers.
input CostCenterInput {
  # Identifier of the cost center
  externalId: ID!
  # Localized names of the cost center
  names: NamesInput!
  # Cost center code - Needed if data is integrated to Health Information System
  code: CostCenterCode
}

# Non-empty String with less or equal than 30 characters
scalar CostCenterName

# Date in ISO 8601 format
scalar Date

# Date and time in ISO 8601 format
scalar DateTime

# Non-empty String with less or equal than 6 characters
scalar DepartmentCode

# Input type for importing departments.
input DepartmentInput {
  # Identifier of the department
  externalId: ID!
  # Localized names of the department
  names: NamesInput!
  # Department Code. This code is needed if data is integrated to Health Information System
  code: DepartmentCode
}

# Non-empty String with less or equal than 30 characters
scalar DepartmentName

# Email address
scalar Email

input EmployeeCostCenterInput {
  # Identifier of the cost center the employee has been attached to
  externalId: ID!
  # Start date of being attached to the cost center
  startDate: Date!
  # End date of being attached to the cost center, if any
  endDate: Date
}

input EmployeeDepartmentInput {
  # Identifier of the department where the employee has worked in
  externalId: ID!
  # Start date of working at the department
  startDate: Date!
  # End date of working at the department, if any
  endDate: Date
}

# Input type for importing employees.
input EmployeeInput {
  # Unique identifier of the employee
  externalId: ID!
  # Human-readable identifier of the employee, such as employee number
  identifier: MediumString
  # Social security number
  ssn: SSN!
  # Call name of the employee, such as the given name
  callName: MediumString!
  # Last name of the employee, such as the family name
  lastName: MediumString!
  # Work-related email address of the employee
  emailAddress: MediumString
  # Private, personal email address of the employee
  privateEmailAddress: MediumString
  # Job title
  jobTitle: MediumString
  # Local phone number of the employee, given without the country code
  localPhoneNumber: MediumString
  # Phone country code, given with the leading plus
  phoneCountryCode: MediumString
  # Start date of the employment relationship
  startDate: Date!
  # End date of the employment relationship, if any
  endDate: Date
  # Deparments where the employee has worked in
  departments: [EmployeeDepartmentInput!]
  # Supervisors of the employee
  supervisors: [EmployeeSupervisorInput!]
  # Periodic health examination clinic code
  periodicHealthExaminationClinic: MediumString
  # Cost centers the employee has been attached to
  costCenters: [EmployeeCostCenterInput!]
  # Language
  language: Language
}

input EmployeeSupervisorInput {
  # Reference to the external identifier of the employee object of the supervisor of the employee
  externalId: ID!
  # Start date of the supervisory relationship
  startDate: Date!
  # End date of the supervisory relationship, if any
  endDate: Date
}

# Finnish business id, 'y-tunnus'
scalar FinnishBusinessId

# Finnish phone number
scalar FinnishPhoneNumber

# Response to import mutations
type ImportPushResponse {
  # The identifier of the batch of data received to be processed. The value can be used to trace the status of the processing.
  messageId: MediumString
}

enum Language {
  fi
  sv
  en
}

# Localized string
type LocalizedString {
  # Finnish
  fi: String
  # Swedish
  sv: String
  # English
  en: String
}

scalar LongString

# Non-empty String with less or equal than 1024 characters
scalar MediumString

# Meta data to be used in resolvers
type Meta {
  lang: Language
}

type Mutation {
  # Placeholder for empty mutation base type. Has no resolver.
  _empty: String
  # Import departments to the Aava-HR application
  importDepartments(
    # Identifier of the organization, assigned by Aava
    organizationExternalId: ID!
    # Departments to be added or updated
    departments: [DepartmentInput!]!
  ): ImportPushResponse!
  # Import employees to the Aava-HR application
  importEmployees(
    # Identifier of the organization, assigned by Aava
    organizationExternalId: ID!
    # Employees to be added or updated
    employees: [EmployeeInput!]!
  ): ImportPushResponse!
  # Import absences of employees to the Aava-HR application
  importAbsences(
    # Identifier of the organization, assigned by Aava
    organizationExternalId: ID!
    absences: [AbsenceInput!]!
  ): ImportPushResponse!
  # Import cost centers to the Aava-HR application
  importCostCenters(
    # Identifier of the organization, assigned by Aava
    organizationExternalId: ID!
    # Cost centers to be added or updated
    costCenters: [CostCenterInput!]!
  ): ImportPushResponse!
}

# Localized names
input NamesInput {
  # The name in Finnish
  fi: MediumString
  # The name in Swedish
  sv: MediumString
  # The name in English
  en: MediumString
}

# Query page size with a reasonable max value
scalar PageSize

input Pagination {
  # Number of items to fetch
  limit: PageSize
  # Number of items to skip
  offset: Int
}

# Input type for importing private persons
input PrivateCustomerInput {
  # Social security number
  ssn: SSN!
  # First name of the person, such as the given name
  firstName: MediumString
  # Last name of the person, such as the family name
  lastName: MediumString
  # Personal email address of the person
  emailAddress: MediumString
  # Phone number of the person; if the value does not start with a plus sign, it is interpreted as a Finnish phone number
  phoneNumber: MediumString
  # Mobile phone number of the person; if the value does not start with a plus
  # sign, it is interpreted as a Finnish phone number
  mobilePhoneNumber: MediumString
  # Postal street address of the person
  streetAddress: MediumString
  # Postal code of the address
  postalCode: MediumString
  # Post office of the address
  postOffice: MediumString
  # Allows use of centralized medical records registry
  allowsCommonRegistry: Boolean
  # Allows use of occupational healthcare records in private care
  allowsViewingOccupationalInformation: Boolean
  # Allows sending of treatment instructions via mail
  allowsTreatmentInstructionsMail: Boolean
  # Allows sending of booking reminders via SMS
  allowsBookingSms: Boolean
  # Allows sending of marketing email
  allowsMarketingMail: Boolean
}

enum ProcessingState {
  UNKNOWN
  IN_PROGRESS
  FAILURE
  DONE
}

type ProcessingStatus {
  messageId: ID!
  importStatus: ProcessingState!
  importType: String
  error: String
  organizationExternalId: ID
  timestamp: Date
}

type Query {
  hello: Boolean!
  # Get the status of an asynchronously processed message and verify organization
  processingStatusWithVerify(
    messageIds: [ID!]!
    organizationExternalId: ID!
  ): [ProcessingStatus]
}

# Non-empty String with less or equal than 42 characters
scalar ShortString

# Finnish social security number
scalar SSN

# Universally Unique Identifier
scalar UUID
